<?xml version="1.0" encoding="UTF-8" ?>
<!--
    status="warn" 日志框架本身的输出日志级别，可以修改为debug
    monitorInterval="5" 自动加载配置文件的间隔时间，不低于 5秒；生产环境中修改配置文件，是热更新，无需重启应用
 -->
<configuration status="warn" monitorInterval="90" name="provider">
    <!--
    集中配置属性进行管理
    使用时通过:${name}
    -->
    <properties>
        <property name="provider.log.home">F:/logs</property>
        <property name="provider.log.backup.home">F:/logs</property>
        <property name="provider.pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %p %c{1.} %m %n</property>
        <property name="provider.charset">UTF-8</property>
        <property name="max.file.size">10MB</property>
        <property name="max.backup.file.count">10</property>
    </properties>

    <!-- 日志处理 -->
    <Appenders>
<!--        控制台日志输出-->
        <!-- 控制台输出 appender，SYSTEM_OUT输出黑色，SYSTEM_ERR输出红色 -->
        <Console name="Console" target="SYSTEM_OUT">
<!--            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] [%-5level] %c{36}:%L -&#45;&#45; %m%n" />-->
            <PatternLayout>
                <charset>${provider.charset}</charset>
                <pattern>${provider.pattern}</pattern>
            </PatternLayout>
        </Console>
<!--下列分别为三种日志文件输出策略，可以多选也可以只选择一种输出-->
        <!-- 1.日志文件输出 appender -->
<!--        <File name="file" fileName="${provider.log.home}/myfile.log">-->
<!--            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %m%n" />-->
<!--        </File>-->

        <!-- 2.使用随机读写流的日志文件输出 appender，性能提高 -->
<!--        <RandomAccessFile name="accessFile" fileName="${provider.log.home}/myAcclog.log">-->
<!--            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %m%n" />-->
<!--        </RandomAccessFile>-->

        <!-- 3.按照一定规则拆分的日志文件的appender -->  <!-- 拆分后的文件 -->
        <RollingFile name="file.core.appender" fileName="${provider.log.home}/file.core.log"
                     filePattern="${provider.log.backup.home}/$${date:yyyy-MM-dd}/provider.core-%d{yyyy-MM-dd}-%i.log"
        immediateFlush="true" append="true">
            <!-- 日志级别过滤器 -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            <!-- 日志消息格式 -->
            <PatternLayout>
                <charset>${provider.charset}</charset>
                <pattern>${provider.pattern}</pattern>
            </PatternLayout>
            <Policies>
                <!-- 在系统启动时，触发拆分规则，生产一个新的日志文件 -->
                <OnStartupTriggeringPolicy />
                <!-- 按照文件大小拆分，10MB -->
                <SizeBasedTriggeringPolicy size="${max.file.size}" />
                <!-- 按照时间节点拆分，规则根据filePattern定义的 -->
                <TimeBasedTriggeringPolicy />
            </Policies>
            <!-- 在同一个目录下，文件的个限定为 30个，超过进行覆盖 -->
            <DefaultRolloverStrategy max="${max.backup.file.count}" />
        </RollingFile>

    </Appenders>

    <!-- logger 定义 -->
    <Loggers>
        <!-- 使用 rootLogger 配置 日志级别 level="trace" -->
        <!--level日志级别: ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF -->
        <Root level="trace">
            <!-- 指定日志使用的处理器 -->
            <!-- 1.开启日志打印到控制台-->
            <AppenderRef ref="Console" />
            <!-- 2.开启普通流打印日志-->
            <AppenderRef ref="file" />
            <!-- 3.开启随机流打印日志-->
            <AppenderRef ref="accessFile" />
            <!-- 4.开启自定义规则打印日志-->
            <AppenderRef ref="file.core.appender" />
        </Root>
    </Loggers>
</configuration>
